function [stateNew, stateCovNew, stateNoise, observNoise, internal ] = ghqf(state, covState, stateNoise, observNoise, observation, model, control1, control2)
    % ghqf. Gauss-Hermite Quadrature Filter.
    %   ghqf for nonlinear systems with additive Gaussian noise by linearizing the process and measurement functions using statistical
    %   linear regression (SLR) through a set of Gauss-Hermite quadrature points that parameterize the Gaussian density.
    %
    %   For more details see "Discrete-Time Nonlinear Filtering Algorithms Using Gauss-Hermite Quadrature"
    %   By Ienkaran Arasaratnam, Simon Haykin, Fellow IEEE, and Robert J. Elliott
    %   Vol. 95, No. 5, May 2007 | Proceedings of the IEEE
    %
    %   [stateNew, stateCovNew, stateNoise, observNoise, internal ] = ghqf(state, covState, stateNoise, observNoise, observation, model, control1, control2)
    %
    %   This filter assumes the following standard state-space model:
    %
    %     x(k) = f[x(k-1), v(k-1), u1(k-1)];
    %     z(k) = h[x(k), n(k), u2(k)],
    %
    %   where:
    %       x  - is the system state;
    %       v  - the process noise;
    %       n  - the observation noise;
    %       u1 - the exogenous input to the state;
    %       f  - the transition function;
    %       u2 - the exogenous input to the state observation function;
    %       z  - the noisy observation of the system.
    %
    %   INPUT
    %         state         state mean at time k-1 ( x(k-1) );
    %         covState      state covariance at time k-1 ( Px(k-1) );
    %         stateNoise    state noise data structure (must be of type 'gaussian' or 'combo-gaussian');
    %         observNoise   observation noise data structure (must be of type 'gaussian' or 'combo-gaussian');
    %         observation   noisy observations at time k ( z(k) );
    %         model         inference data structure, which fully describes filtration issue (generated by inferenceDataGenerator function);
    %         control1      exogenous input to state transition function at time k-1 ( u1(k-1) );
    %         control2      exogenous input to state observation function at time k ( u2(k) ).
    %
    %   OUTPUT
    %         stateNew                  estimates of state at time k ( E[x(t)|z(1), z(2), ..., z(t)] for t = k );
    %         stateCovNew               state covariance;
    %         stateNoise                state noise data structure (possibly updated);
    %         observNoise               observation noise data structure (possibly updated);
    %         internal                      <<optional>> internal variables data structure;
    %           .meanPredictedState         	predicted state mean ( E[x(t)|z(1), z(2), ..., z(t-1)] for t = k );
    %           .predictedStateCov              predicted state covariance;
    %           .predictedObservMean            predicted observation ( E[z(k)|Z(k-1)] );
    %           .inov                           inovation signal;
    %           .predictedObservCov             inovation covariance;
    %           .filterGain                     filter gain.
    %
    %% error checking
    if (nargin ~= 8 && nargin ~= 6)
        error('[ ghqf ] Not enough input arguments (should be 6 or 8).');
    end
    
    if (model.stateDimension ~= size(state, 1))
        error('[ ghqf ] Prior state dimension differs from model.stateDimension');
    end
    
    if (model.stateDimension ~= size(covState, 1))
        error('[ ghqf ] Prior state covariance dimension differs from model.stateDimension');
    end
    
    if (model.observationDimension ~= size(observation, 1))
        error('[ ghqf ] Observation dimension differs from model.observationDimension');
    end
    %%
    stateDim = model.stateDimension;
    obsDim   = model.observationDimension;
    order    = model.ghkfParams(1);
    
    if (model.controlInputDimension == 0)
        control1 = [];
    end
    
    if (model.control2InputDimension == 0)
        control2 = [];
    end
    
    generatePoints = memoize(@gaussHermiteRule);
    [set, weights] = generatePoints(order, stateDim);
    w_x = rvecrep(weights, stateDim);
    w_z = rvecrep(weights, obsDim);
    
    %% evaluate cubature points
    numPoints = order^stateDim;
    pointSet  = cvecrep(state, numPoints) + chol(covState, 'lower')*set;
    
    %% propagate quadrature points through process model
    predictedState = model.stateTransitionFun(model, pointSet, cvecrep(stateNoise.mean, numPoints), control1);
    
    predictedStateMean = sum(predictedState.*w_x, 2);
    sqrtPredictedStateCov = (predictedState - cvecrep(predictedStateMean, numPoints));
    predictedStateCov = w_x.*sqrtPredictedStateCov*sqrtPredictedStateCov' + stateNoise.covariance;
    
    %% evaluate cubature points for measurement
    pointSet2 = cvecrep(predictedStateMean, numPoints) + chol(predictedStateCov, 'lower')*set;
    
    %% propagate through observation model
    predictObs = model.stateObservationFun(model, pointSet2, cvecrep(observNoise.mean, numPoints), control2);
    
    predictObsMean = sum(predictObs.*w_z, 2);
    
    %% measurement update
    x = (pointSet2 - cvecrep(predictedStateMean, numPoints));
    z = (predictObs - cvecrep(predictObsMean, numPoints));
    
    innovationCov = w_z.*z*z'+ observNoise.covariance;
    crossCov = w_x.*x*z';
    filterGain = crossCov*pinv(innovationCov);
    
    if isempty(model.innovationModelFunc)
        inov = observation - predictObsMean;
    else
        inov = model.innovationModelFunc(model, observation, predictObsMean);
    end
    
    stateNew = predictedStateMean + filterGain*inov;
    stateCovNew = predictedStateCov - filterGain*innovationCov*filterGain';
    
    %% build additional ouptut param (required for debug)
    if nargout > 4
        internal.meanPredictedState    = predictedStateMean;
        internal.predictedStateCov     = sqrtPredictedStateCov*sqrtPredictedStateCov';
        internal.predictedObservMean   = predictObsMean;
        internal.inov                  = inov;
        internal.predictedObservCov    = innovationCov;
        internal.filterGain            = filterGain;
    end
end
