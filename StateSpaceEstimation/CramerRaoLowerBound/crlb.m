function [ crm, predict_crlb ] = crlb( crlb_prev, state, observation, stateNoise, observNoise, model )
    % crlb. Calculates Cramer-Rao lower bound.
    %
    %   [ crm, predict_crlb ] = crlb( crlb_prev, state, observation, stateNoise, observNoise, model )
    %
    %   Caluclate Crame-Rao lower bound using linearization method like EKF. For more details see:
    %   Lecture notes on state estimation of nonlinear non-Gaussian stochastic systems. Miroslav Simandl.
    %   Department of Cybernetics Faculty of Applied Sciences University of West Bohemia in Pilsen.
    %   10.80-10.84 formulas are used.
    %
    %   Following state space model using:
    %
    %     x(k) = f[x(k-1), v(k-1), u1(k-1)];
    %     z(k) = h[x(k), n(k), u2(k)],
    %
    %   where:
    %       x  - is the system state;
    %       v  - the process noise;
    %       n  - the observation noise;
    %       u1 - the exogenous input to the state;
    %       f  - the transition function;
    %       u2 - the exogenous input to the state observation function;
    %       z  - the noisy observation of the system.
    %
    %   INPUT:
    %       
    %       crlb_prev       predicted value of Cramer Rao lower bound from step k-1;
    %       state           state mean at time k ( x(k) );
    %       stateNoise      process noise data structure;
    %       observNoise     observation noise data structure;
    %       observation     noisy observations at time k ( z(k) );
    %       model           inference data structure, which fully describes filtration issue (generated by inferenceDataGenerator function).
    %
    %   OUTPUT
    %       crm             calculated Cramer-Rao lower bound at time k;
    %       predict_crlb    predicted value of Cramer Rao lower bound for step k+1;
    %
    %% error checking
    narginchk(6, 6);
    
    if (size(state, 2) ~= size(observation, 2))
        error('[ crlb ] second (which tipically related with time) dimesnsion mismatch between state matrix and observation matrix');
    end
    
    if (model.stateDimension ~= size(state, 1))
        error('[ crlb ] Prior state dimension differs from model.stateDimension');
    end
    
    if (model.observationDimension ~= size(observation, 1))
        error('[ crlb ] Observation dimension differs from model.observationDimension');
    end
    %%
    control1 = []; % probably, must be an argument.
    control2 = []; % probably, must be an argument.
    
    [c, h] = model.linearize(model, state, stateNoise.mean, observNoise.mean, control1, control2, 'C', 'H');
    predict_z_cov   = c * crlb_prev * c' + h * observNoise.covariance * h';
    gain            = crlb_prev * c' / predict_z_cov;
    crlb_curr       = crlb_prev - gain * predict_z_cov * gain';       
    crm             = mean(diag(crlb_curr), 2).^0.5;
    
    [f, g] = model.linearize(model, state, stateNoise.mean, observNoise.mean, control1, control2, 'F', 'G');    
    predict_crlb  = f * crlb_curr * f' + g * stateNoise.covariance * g';
end
