function [newState, newCovState, stateNoise, observNoise, internal ] = ckf(state, covState, stateNoise, observNoise, observation, model, control1, control2)
    % ckf. Cubature Kalman Filter (subclass of Sigma Point Kalman Filter)
    %
    %   [newState, newCovState, stateNoise, observNoise, internal ] = ckf(state, covState, stateNoise, observNoise, observation, model, control1, control2)
    %
    %   This filter assumes the following standard state-space model:
    %
    %     x(k) = f[x(k-1), v(k-1), u1(k-1)];
    %     z(k) = h[x(k), n(k), u2(k)],
    %
    %   where:
    %       x  - is the system state;
    %       v  - the process noise;
    %       n  - the observation noise;
    %       u1 - the exogenous input to the state;
    %       f  - the transition function;
    %       u2 - the exogenous input to the state observation function;
    %       z  - the noisy observation of the system.
    %
    %   INPUT
    %         state         state mean at time k-1 ( x(k-1) );
    %         covState      state covariance at time k-1 ( Px(k-1) );
    %         stateNoise    state noise data structure (must be of type 'gaussian' or 'combo-gaussian');
    %         observNoise   observation noise data structure (must be of type 'gaussian' or 'combo-gaussian');
    %         observation   noisy observations starting at time k ( z(k) );
    %         model         inference data structure, which fully describes filtration issue  (generated by inferenceDataGenerator function);
    %         control1      exogenous input to state transition function starting at time k-1 ( u1(k-1) );
    %         control2      exogenous input to state observation function starting at time k  ( u2(k) ).
    %
    %   OUTPUT
    %         newState                  estimates of state starting at time k ( E[x(t)|z(1), z(2),..., z(t)] for t = k );
    %         newCovState               state covariance;
    %         stateNoise                state noise data structure (possibly updated);
    %         observNoise               observation noise data structure (possibly updated);
    %         internal                  <<optional>> internal variables data structure;
    %           .meanPredictedState        predicted state mean ( E[x(t)|z(1), z(2), ..., z(t-1)] for t = k );
    %           .predictedStateCov         predicted state covariance;
    %           .predictedObservMean       predicted observation ( E[z(k)|Z(k-1)] );
    %           .inov                      inovation signal;
    %           .predictedObservCov        inovation covariance;
    %           .filterGain                filter gain.
    %
    %% error checking
    if (nargin ~= 8 && nargin ~= 6)
        error('[ ckf ] Not enough input arguments (should be 6 or 8).');
    end
    
    if model.stateDimension ~= size(state, 1)
        error('[ ckf ] Prior state dimension differs from model.stateDimension');
    end
    
    if model.stateDimension ~= size(covState, 1)
        error('[ ckf ] Prior state covariance dimension differs from model.stateDimension');
    end
    
    if model.observationDimension ~= size(observation, 1)
        error('[ ckf ] Observation dimension differs from model.observationDimension');
    end
    
    %%
    stateDim        = model.stateDimension;
    numCubPointSet = 2*stateDim;
    
    if (model.controlInputDimension == 0)
        control1 = [];
    end
    
    %% calculate cubature points
    offsetPrediction = svdDecomposition(covState);
    cubatureSet  = cvecrep(state, numCubPointSet) + offsetPrediction*(sqrt(numCubPointSet / 2)*[eye(stateDim) -eye(stateDim)]);
    
    %% propagate cubature-points through process model
    predictedState = model.stateTransitionFun(model, cubatureSet, cvecrep(stateNoise.mean, numCubPointSet), control1);
    
    predictedStateMean = sum(predictedState, 2) / numCubPointSet;
    sqrtPredictedStateCov = (predictedState - cvecrep(predictedStateMean, numCubPointSet)) / sqrt(numCubPointSet);
    predictedStateCov = sqrtPredictedStateCov*sqrtPredictedStateCov' + stateNoise.covariance;
    
    %% calculate cubature points for measurement
    offsetObs = svdDecomposition(predictedStateCov);
    cubatureSet2 = cvecrep(predictedStateMean, numCubPointSet) + offsetObs*(sqrt(numCubPointSet / 2)*[eye(stateDim) -eye(stateDim)]);
    
    %% propagate through observation model
    if (model.control2InputDimension == 0)
        control2 = [];
    end
    
    predictObs = model.stateObservationFun(model, cubatureSet2, cvecrep(observNoise.mean, numCubPointSet), control2);
    predictObsMean = sum(predictObs, 2) / numCubPointSet;
    
    %% measurement update (correction)
    x = (cubatureSet2(1:stateDim, :) - cvecrep(predictedStateMean, numCubPointSet)) / sqrt(numCubPointSet);
    z = (predictObs-cvecrep(predictObsMean, numCubPointSet)) / sqrt(numCubPointSet);
    
    innovationCov = z*z'+ observNoise.covariance;
    crossCov = x*z';
    filterGain = crossCov*pinv(innovationCov);
    
    if isempty(model.innovationModelFunc)
        inov = observation - predictObsMean;
    else
        inov = model.innovationModelFunc( model, observation, predictObsMean);
    end
    
    newState = predictedStateMean + filterGain*inov;
    newCovState = predictedStateCov - filterGain*innovationCov*filterGain';
    
    %% build additional ouptut param (required for debug)
    if nargout > 4
        internal.meanPredictedState    = predictedStateMean;
        internal.predictedStateCov     = predictedStateCov;
        internal.predictedObservMean   = predictObsMean;
        internal.inov                  = inov;
        internal.predictedObservCov    = innovationCov;
        internal.filterGain            = filterGain;
    end
end
