function [estimate, estimateCov, processNoise, observationNoise, internalVariables] = ukf(state, covState, processNoise, observationNoise, observation, gssModel, controlProcess, controlObservation)
    % UKF  Unscented Kalman Filter
    %
    %   [newState, newCovState, processNoise, observationNoise, internalVariables] = ukf(state, covState, processNoise, observationNoise, observation, controlProcess, controlObservation, inferenceDataSet)
    %
    %   This filter assumes the following standard state-space model:
    %
    %     x(k) = f[x(k-1), v(k-1), U1(k-1)]
    %     y(k) = h[x(k), n(k), U2(k)]
    %
    %   where: 
    %       x is the system state, 
    %       v the process noise, 
    %       n the observation noise, 
    %       u1 the exogenous input to the state
    %       f the transition function, 
    %       u2 the exogenous input to the state observation function 
    %       y the noisy observation of the system.
    %
    %   INPUT
    %         state                  state mean at time k-1          ( xh(k-1) )
    %         covState               state covariance at time k-1    ( Px(k-1) )
    %         processNoise           process noise data structure     (must be of type 'gaussian' or 'combo-gaussian')
    %         observationNoise       observation noise data structure (must be of type 'gaussian' or 'combo-gaussian')
    %         observation            noisy observations starting at time k ( y(k),y(k+1),...,y(k+N-1) )
    %         controlProcess         exogenous input to state transition function starting at time k-1 ( u1(k-1),u1(k),...,u1(k+N-2) )
    %         controlObservation     exogenous input to state observation function starting at time k  ( u2(k),u2(k+1),...,u2(k+N-1) )
    %         inferenceDataSet       inference data structure generated by GENINFDS function.
    %
    %   OUTPUT
    %         estimate               estimates of state starting at time k ( E[x(t)|y(1),y(2),...,y(t)] for t=k,k+1,...,k+N-1 )
    %         estimateCov            state covariance
    %         processNoise           process noise data structure     (possibly updated)
    %         observationNoise       observation noise data structure (possibly updated)
    %
    %         internalVariables             <<optional>> internal variables data structure
    %           .meanPredictedState         	predicted state mean ( E[x(t)|y(1),y(2),..y(t-1)] for t=k,k+1,...,k+N-1 )
    %           .predictedStateCov              predicted state covariance
    %           .predictedObservMean            predicted observation ( E[y(k)|Y(k-1)] )
    %           .inov                           inovation signal
    %           .predictedObservCov             inovation covariance
    %           .filterGain                     Kalman gain
    %
    %   Required gssModel fields:
    %         .spkfParams            SPKF parameters = [alpha beta kappa] with
    %                                   alpha  :  UKF scale factor
    %                                   beta   :  UKF covariance correction factor
    %                                   kappa  :  UKF secondary scaling parameter       
    %% ERROR CHECKING
    if (nargin ~= 8 && nargin ~= 6); error(' [ ukf ] Not enough input arguments (should be 6 or 8).'); end

    if (gssModel.stateDimension ~= size(state, 1)); error('[ ukf ] Prior state dimension differs from inferenceDataSet.stateDimension'); end

    if (gssModel.stateDimension ~= size(covState, 1)); error('[ ukf ] Prior state covariance dimension differs from inferenceDataSet.stateDimension'); end

    if (gssModel.observationDimension ~= size(observation, 1)); error('[ ukf ] Observation dimension differs from inferenceDataSet.observationDimension'); end

    %% Get UKF scaling parameters
    stateDim         = gssModel.stateDimension;
    procNoiseDim     = gssModel.processNoiseDimension;
    obserNoiseDim    = gssModel.observationNoiseDimension;
    
    alpha = gssModel.spkfParams(1);
    beta  = gssModel.spkfParams(2);
    kappa = gssModel.spkfParams(3);

    augmentDim  = stateDim + procNoiseDim + obserNoiseDim;
    numSigmaSet = 2*augmentDim + 1;
    lambda      = alpha^2*(augmentDim + kappa)-augmentDim;

    if (gssModel.controlInputDimension == 0); controlProcess = []; end

    if (gssModel.control2InputDimension == 0); controlObservation = []; end

    w    = [lambda 0.5 0] / (augmentDim + lambda);
    w(3) = w(1) + (1 - alpha^2) + beta;

    %% generate sigma point set
    if (procNoiseDim ~= 0)
        sigmaPoints  = cvecrep([state; processNoise.mean; observationNoise.mean], numSigmaSet);
        covStateExt  = [chol(covState, 'lower') zeros(stateDim, procNoiseDim); zeros(procNoiseDim, stateDim) chol(processNoise.covariance, 'lower')];
        offset       = ([covStateExt zeros(stateDim+procNoiseDim, obserNoiseDim); zeros(obserNoiseDim, stateDim + procNoiseDim) chol(observationNoise.covariance, 'lower')]);
    else
        sigmaPoints  = rvecrep([state observationNoise.mean], numSigmaSet);
        offset       = ([chol(covState, 'lower') zeros(stateDim, obserNoiseDim); zeros(obserNoiseDim, stateDim) chol(observationNoise.covariance, 'lower')]);
    end
    
    sigmaPoints(:, 2:numSigmaSet) = sigmaPoints(:, 2:numSigmaSet) + sqrt(augmentDim + lambda)*[offset -offset];

    %% propagate sigma-points through process model
    predictState = gssModel.stateTransitionFun(gssModel, sigmaPoints(1:stateDim, :), sigmaPoints(stateDim + 1 : stateDim + procNoiseDim, :), controlProcess);
    meanPredictState = w(1) * predictState(:, 1) + w(2)*sum(predictState(:, 2:numSigmaSet), 2);
    centrPredState = predictState - cvecrep(meanPredictState, numSigmaSet);
    predictedStateCov = w(3)*centrPredState(:, 1)*centrPredState(:, 1)' + w(2)*centrPredState(:, 2:numSigmaSet)*centrPredState(:, 2:numSigmaSet)';

    %% propagate through observation model
    predictedObserv = gssModel.stateObservationFun(gssModel, predictState, sigmaPoints(stateDim+procNoiseDim+1 : stateDim+procNoiseDim+obserNoiseDim, :), controlObservation);    
    predictedObservMean = w(1)*predictedObserv(:, 1) + w(2)*sum(predictedObserv(:, 2:numSigmaSet), 2);
    centredPredicatedObserv = predictedObserv - cvecrep(predictedObservMean, numSigmaSet);
    predictedObservCov  = w(3)*centredPredicatedObserv(:, 1)*centredPredicatedObserv(:, 1)' + ...
        w(2)*centredPredicatedObserv(:, 2:numSigmaSet)*centredPredicatedObserv(:, 2:numSigmaSet)'...
         + observationNoise.covariance;

    %% measurement update
    crossCov = w(3)*centrPredState(:, 1)*centredPredicatedObserv(:, 1)' + ...
        w(2)*centrPredState(:, 2:numSigmaSet)*centredPredicatedObserv(:, 2:numSigmaSet)';
    
    filterGain = crossCov/predictedObservCov;

    if isempty(gssModel.innovationModelFunc)
        inov = observation - predictedObservMean;
    else
        inov = gssModel.innovationModelFunc(gssModel, observation, predictedObservMean);
    end

    estimate = meanPredictState + filterGain*inov;
    estimateCov = predictedStateCov - filterGain*predictedObservCov*filterGain';

    %% additional ouptut param (required for debug)
    internalVariables.meanPredictedState    = meanPredictState;
    internalVariables.predictedStateCov     = predictedStateCov;
    internalVariables.predictedObservMean   = predictedObservMean;
    internalVariables.inov                  = inov;
    internalVariables.predictedObservCov    = predictedObservCov;
    internalVariables.filterGain            = filterGain;
end
