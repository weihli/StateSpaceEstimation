function [ estimate, dataSet, stateNoise, observNoise ] = pf( dataSet, stateNoise, observNoise, observation, control1, control2, model )
    % pf. Generic Particle Filter.
    %
    %   This filter is also known as the 'Bootstrap Particle Filter' or the 'Condensation Algorithm'
    %
    %   [ estimate, dataSet, stateNoise, observNoise ] = pf( dataSet, stateNoise, observNoise, observation, control1, control2, model )
    %
    %   This filter assumes the following standard state-space model:
    %
    %     x(k) = f[x(k-1), v(k-1), u1(k-1)];
    %     z(k) = h[x(k), n(k), u2(k)],
    %
    %   where:
    %       x   is the system state;
    %       v   the process noise;
    %       n   the observation noise;
    %       u1  the exogenous input to the state;
    %       f   the transition function;
    %       u2  the exogenous input to the state observation function;
    %       z   the noisy observation of the system.
    %
    %   INPUT
    %         dataSet           particle filter data structure (contains set of particles as well as their corresponding weights);
    %         stateNoise        process noise data structure;
    %         observNoise       observation noise data structure;
    %         observation       noisy observations at time k ( z(k) );
    %         control1          exogenous input to state transition function at time k-1 ( u1(k-1) );
    %         control2          exogenous input to state observation function at time k ( u2(k) );
    %         model             inference data structure, which fully describes filtration issue (generated by inferenceDataGenerator function).
    %
    %   OUTPUT
    %         estimate          state estimate generated from posterior distribution of state given all observation;
    %         dataSet           updated Particle filter data structure. Contains set of particles as well as their corresponding weights;
    %         stateNoise        process noise data structure (possibly updated);
    %         observNoise       observation noise data structure (possibly updated).
    %
    %   dataSet fields:
    %         .particlesNum     number of particles;
    %         .particles        particle buffer (statedim-by-N matrix);
    %         .weights          particle weights (1-by-N r-vector).
    %
    %   Required model fields:
    %         .estimateType        	estimate type : 'mean', 'mode', etc;
    %         .resampleThreshold    if the ratio of the 'effective particle set size' to the total number of particles
    %                               drop below this threshold  i.e.  (nEfective / particlesNum) < resampleThreshold
    %                               the particles will be resampled.  (nEfective is always less than or equal to particlesNum).
    %
    %%
    if nargin ~= 7
        error('[ pf ] Incorrect number of input arguments.');
    end
    %%
    cnt          = dataSet.particlesNum;
    particles    = dataSet.particles;
    weights      = dataSet.weights;
    
    if (model.controlInputDimension == 0)
        control1 = zeros(0, cnt);
    end
    
    if (model.control2InputDimension == 0)
        control2 = zeros(0, cnt);
    end
    
    if (isfield(model, 'resampleMethod'))
        resampleMethod = model.resampleMethod;
    else
        resampleMethod = 'residual';
    end
    
    xrand = stateNoise.sample(stateNoise, cnt);
    particlesPred = model.stateTransitionFun(model, particles, xrand, control1);
    
    %% Evaluate importance weights
    likelihood = model.likelihoodStateFun(model, cvecrep(observation, cnt), particlesPred, control2, observNoise) + 1e-99;
    
    weights = weights .* likelihood;
    weights = weights / sum(weights);
    
    %% Resample
    resampleThreshold  = round(model.resampleThreshold * cnt);
    effectiveSetSize = 1 / sum(weights.^2);
    
    if (effectiveSetSize < resampleThreshold)
        outIndex = resample(resampleMethod, weights, cnt);
        particles = particlesPred(:, outIndex);
        weights   = cvecrep(1 / cnt, cnt);
    else
        particles  = particlesPred;
    end
    
    %% Calculate estimate
    switch model.estimateType
        case 'mean'
            estimate = sum(rvecrep(weights, model.stateDimension) .* particles, 2);
        case 'median'
            estimate = median(rvecrep(weights, model.stateDimension) .* particles, 2);
        otherwise
            error('[ pf ] Unknown estimate type.');
    end
    
    dataSet.particles = particles;
    dataSet.weights   = weights;
end
